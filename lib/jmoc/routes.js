// Generated by CoffeeScript 1.9.2
(function() {
  'use strict';
  var aws, base64url, config, crypto, jiggle, middleware, mockify, routes, validator;

  base64url = require('base64url');

  crypto = require('crypto');

  jiggle = require('jiggle');

  validator = require('validator');

  aws = require('./aws');

  config = require('./config');

  middleware = require('./middleware');

  routes = {
    '/ping': {
      get: {
        handler: function(req, res) {
          var pong;
          pong = config.misc.pong;
          res.type('text/plain');
          return res.send(pong);
        },
        middleware: [middleware.noCache]
      }
    },
    '/readme': {
      get: {
        handler: function(req, res) {
          return res.sendStatus(501);
        }
      }
    },
    '/mock/:id': {
      get: {
        handler: function(req, res) {
          var id, obj, params, ref;
          id = (ref = req.params.id) != null ? typeof ref.normalize === "function" ? ref.normalize() : void 0 : void 0;
          switch (false) {
            case !(id == null):
              return res.status(400).json({
                msg: 'Missing endpoint ID'
              });
            case id.constructor === String:
              return res.status(400).json({
                msg: 'Endpoint ID must be a string'
              });
            case !!validator.matches(id, config.regex.urlhash):
              return res.status(400).json({
                msg: 'Endpoint ID must be base64url-encoded'
              });
            default:
              params = {
                TableName: config.aws.ddb.tables.urls.name,
                Key: (
                  obj = {},
                  obj["" + config.aws.ddb.tables.urls.hash] = id,
                  obj
                )
              };
              return aws.ddb.getItem(params, function(err, awsdata) {
                if (err != null) {
                  return res.status(500).json(err);
                } else {
                  if (Date.now() > awsdata.Item.Expiry) {
                    return res.status(410).json({
                      msg: "This JSON mock expired on " + (new Date(awsdata.Item.Expiry).toUTCString())
                    });
                  } else {
                    return res.json(mockify(awsdata.Item.Json));
                  }
                }
              });
          }
        }
      },
      "delete": {
        handler: function(req, res) {
          var id, obj, params, ref;
          id = (ref = req.params.id) != null ? typeof ref.normalize === "function" ? ref.normalize() : void 0 : void 0;
          switch (false) {
            case !(id == null):
              return res.status(400).json({
                msg: 'Missing endpoint ID'
              });
            case id.constructor === String:
              return res.status(400).json({
                msg: 'Endpoint ID must be a string'
              });
            case !!validator.matches(id, config.regex.urlhash):
              return res.status(400).json({
                msg: 'Endpoint ID must be base64url-encoded'
              });
            default:
              params = {
                TableName: config.aws.ddb.tables.urls.name,
                Key: (
                  obj = {},
                  obj["" + config.aws.ddb.tables.urls.hash] = id,
                  obj
                )
              };
              return aws.ddb.deleteItem(params, function(err, awsdata) {
                if (err != null) {
                  return res.status(500).json(err);
                } else {
                  return res.sendStatus(204);
                }
              });
          }
        }
      }
    },
    '/mock/': {
      post: {
        handler: function(req, res) {
          var data, expireMillis, id, json, nowMillis, numKeys, obj, options, params;
          options = req.body.Options;
          json = req.body.Json;
          numKeys = Object.keys(req.body).length;
          switch (false) {
            case !(json == null):
              return res.status(400).json({
                msg: "Missing field: 'Json'"
              });
            case !(numKeys > 2 || ((options == null) && numKeys > 1)):
              return res.status(400).json({
                msg: 'Unknown fields specified'
              });
            default:
              id = base64url.encode(crypto.randomBytes(config.crypt.len.urlhash));
              nowMillis = Date.now();
              expireMillis = nowMillis + 86400000 * config.app.limits.url;
              data = (
                obj = {},
                obj["" + config.aws.ddb.tables.urls.hash] = id,
                obj.Json = json,
                obj.Expiry = expireMillis,
                obj
              );
              params = {
                TableName: config.aws.ddb.tables.urls.name,
                Item: data,
                ConditionExpression: 'attribute_not_exists(#HK)',
                ExpressionAttributeNames: {
                  '#HK': config.aws.ddb.tables.urls.hash
                }
              };
              return aws.ddb.putItem(params, function(err, awsdata) {
                if (err != null) {
                  return res.status(500).json(err);
                } else {
                  data.Expiry = new Date(data.Expiry).toUTCString();
                  return res.status(201).json(data);
                }
              });
          }
        }
      }
    }
  };

  mockify = function(json) {
    var data, decimalIndex, item, k, messed, numStr, precision, random, v;
    if (json == null) {
      return json;
    }
    switch (json.constructor) {
      case Number:
        random = Math.random() * 2 * json;
        numStr = json.toString();
        decimalIndex = numStr.indexOf('.');
        if (decimalIndex < 0) {
          return Math.round(random);
        } else {
          precision = numStr.length - decimalIndex - 1;
          return random.toFixed(precision);
        }
        break;
      case String:
        messed = jiggle(json.split(/\s+/, 1000));
        return messed.join(' ');
      case Boolean:
        return Math.random() < 0.5;
      case Array:
        return (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = json.length; i < len; i++) {
            item = json[i];
            results.push(mockify(item));
          }
          return results;
        })();
      case Object:
        data = {};
        for (k in json) {
          v = json[k];
          data[k] = mockify(v);
        }
        return data;
      default:
        return json;
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = routes;
  }

}).call(this);
